@page "/counter"
@using Npgsql
@using Newtonsoft.Json
@using System.Text.Json
@inject techtech2.MailService.MailService MailService
@rendermode InteractiveServer

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<select multiple @onchange="OnSelectedRolesChanged">
    @foreach (var role in roles)
    {
        <option value="@role" selected="@SelectedRoles.Contains(role)">@role</option>
    }
</select>

<p>Subject</p>
<input class="subject" @bind="subject">

<p>Body</p>
<input class="body" @bind="body">


<button class="btn btn-primary" @onclick="SendEmail">Send Mail</button>

@if (Emails.Count <= 5)
{
    foreach (string email in Emails)
    {
        <p>Sent to @email</p>
    }
} else
{
    <p>Sent to @Emails.Count emails</p>
}

@code {
    private List<string> roles = new List<string>();
    private List<string> SelectedRoles { get; set; } = new List<string>();
    private List<string> Emails = new List<string>();

    private string subject;
    private string body;

    private NpgsqlConnection connection;

    protected override async Task OnInitializedAsync()
    {
        string inputSQL = "SELECT role FROM Employees";

        connection = new NpgsqlConnection(GetConnectionString());
        connection.Open();

        try
        {
            using (NpgsqlCommand command = new NpgsqlCommand(inputSQL, connection))
            {
                using (NpgsqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        if (!roles.Contains(reader.GetString(0)))
                            roles.Add(reader.GetString(0));
                    }
                }
            }
        }
        finally
        {
            if (connection.State == System.Data.ConnectionState.Open)
            {
                connection.Close();
            }
        }
    }

    private string GetConnectionString()
    {
        string filePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "conString.json");
        string jsonString = File.ReadAllText(filePath);

        var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
        var jsonDoc = JsonDocument.Parse(jsonString);
        var root = jsonDoc.RootElement;

        string connectionString = root.GetProperty("ConnectionString").GetString();

        return connectionString;
    }

    private void OnSelectedRolesChanged(ChangeEventArgs e)
    {
        var selectedOptions = e.Value as IEnumerable<string>;
        if (selectedOptions != null)
        {
            SelectedRoles = selectedOptions.ToList();
        }
        Emails.Clear();
    }

    private void SendEmail()
    {
        GetEmails();

        foreach (var recipientMail in Emails)
        {
            MailService.SendEmail(recipientMail, subject, body);
        }
    }

    private void GetEmails()
    {
        Emails.Clear();
        connection.Open();
        try
        {
            foreach (var role in SelectedRoles)
            {
                string inputSQL = $"SELECT email FROM Employees WHERE role = '{role}'";

                using (NpgsqlCommand command = new NpgsqlCommand(inputSQL, connection))
                {
                    using (NpgsqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            Emails.Add(reader.GetString(0));
                        }
                    }
                }
            }
        }
        finally
        {
            if (connection.State == System.Data.ConnectionState.Open)
            {
                connection.Close();
            }
        }
    }
}
