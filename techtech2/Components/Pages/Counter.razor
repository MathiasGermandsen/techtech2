@page "/counter"
@using Npgsql
@using Newtonsoft.Json
@using System.Text.Json
@inject techtech2.MailService.MailService MailService
@rendermode InteractiveServer

<PageTitle>Counter</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-12 col-md-8">
            <h1 class="my-4 text-center">Email-Services</h1>

            <div class="form-group">
                <label>Select Roles to Email:</label>
                @foreach (var role in roles)
                {
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" value="@role" id="@role" @onchange="((ChangeEventArgs __e) => OnRoleCheckedChanged(role, __e))" />
                        <label class="form-check-label" for="@role">@role</label>
                    </div>
                }
            </div>

            <div class="form-group">
                <label for="subject">Subject</label>
                <input class="form-control" id="subject" @bind="subject">
            </div>

            <div class="form-group">
                <label for="body">Body</label>
                <textarea class="form-control" id="body" @bind="body"></textarea>
            </div>

            <div class="text-center mt-3">
                <button class="btn btn-primary" @onclick="SendEmail">Send Mail</button>
            </div>

            @if (Emails.Count <= 5)
            {
                foreach (string email in Emails)
                {
                    <p class="p-title">Sent to @email</p>
                }
            }
            else
            {
                <p class="p-title">Sent to @Emails.Count emails</p>
            }

        </div>
    </div>
</div>

@code {
    private List<string> roles = new List<string>();
    private List<string> SelectedRoles { get; set; } = new List<string>();
    private List<string> Emails = new List<string>();

    private string subject;
    private string body;

    private NpgsqlConnection connection;


    protected override async Task OnInitializedAsync()
    {
        string inputSQL = "SELECT role FROM Employees";

        connection = new NpgsqlConnection(GetConnectionString());
        connection.Open();

        try
        {
            using (NpgsqlCommand command = new NpgsqlCommand(inputSQL, connection))
            {
                using (NpgsqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        if (!roles.Contains(reader.GetString(0)))
                            roles.Add(reader.GetString(0));
                    }
                }
            }
        }
        finally
        {
            if (connection.State == System.Data.ConnectionState.Open)
            {
                connection.Close();
            }
        }
    }

    private string GetConnectionString()
    {
        string filePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "conString.json");
        string jsonString = File.ReadAllText(filePath);

        var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
        var jsonDoc = JsonDocument.Parse(jsonString);
        var root = jsonDoc.RootElement;

        string connectionString = root.GetProperty("ConnectionString").GetString();

        return connectionString;
    }

    private void OnRoleCheckedChanged(string role, ChangeEventArgs e)
    {
        if ((bool)e.Value && !SelectedRoles.Contains(role))
        {
            SelectedRoles.Add(role);
        }
        else if (!(bool)e.Value && SelectedRoles.Contains(role))
        {
            SelectedRoles.Remove(role);
        }
        Emails.Clear();
    }
    private void SendEmail()
    {

        GetEmails();

        foreach (var recipientMail in Emails)
        {
            MailService.SendEmail(recipientMail, subject, body);
        }
    }

    private void GetEmails()
    {
        Emails.Clear();
        connection.Open();
        try
        {
            foreach (var role in SelectedRoles)
            {
                string inputSQL = $"SELECT email FROM Employees WHERE role = '{role}'";

                using (NpgsqlCommand command = new NpgsqlCommand(inputSQL, connection))
                {
                    using (NpgsqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            Emails.Add(reader.GetString(0));
                        }
                    }
                }
            }
        }
        finally
        {
            if (connection.State == System.Data.ConnectionState.Open)
            {
                connection.Close();
            }
        }
    }
}

<style>
    .Label-tag {
        display: block;
        margin-bottom: 20px;
    }

    .p-title {
        margin-top: 20px;
    }
</style>

